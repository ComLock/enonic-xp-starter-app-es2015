plugins {
	id 'java' // Needed for assemble and build
	//id 'maven' // When is this needed?
	//id 'maven-publish' // Provides publishing and publishToMavenLocal
	id 'com.enonic.defaults' version '2.0.1' // Publishing
	id 'com.enonic.xp.app' version '2.0.0'
	id 'com.moowork.node' version '1.3.1'
}


repositories {
	xp.enonicRepo()
	jcenter()
	//mavenLocal() // Local maven repo may contain outdated packages
}


app {
	name = project.appName
	displayName = "${appDisplayName}"
	vendorName = 'Enonic AS'
	vendorUrl = 'http://enonic.com'
	systemVersion = "${xpVersion}"
}


dependencies {
	compile "com.enonic.xp:core-api:${xpVersion}"
	compile "com.enonic.xp:portal-api:${xpVersion}"

	//include "com.enonic.xp:lib-admin:${xpVersion}"
	//include "com.enonic.xp:lib-auth:${xpVersion}"
	//include "com.enonic.xp:lib-cluster:${xpVersion}"
	//include "com.enonic.xp:lib-common:${xpVersion}"
	//include "com.enonic.xp:lib-content:${xpVersion}"
	//include "com.enonic.xp:lib-context:${xpVersion}"
	//include "com.enonic.xp:lib-event:${xpVersion}"
	//include "com.enonic.xp:lib-i18n:${xpVersion}"
	//include "com.enonic.xp:lib-io:${xpVersion}"
	//include "com.enonic.xp:lib-mail:${xpVersion}"
	//include "com.enonic.xp:lib-mustache:${xpVersion}"
	//include "com.enonic.xp:lib-node:${xpVersion}"
	include "com.enonic.xp:lib-portal:${xpVersion}"
	//include "com.enonic.xp:lib-repo:${xpVersion}"
	//include "com.enonic.xp:lib-task:${xpVersion}"
	//include "com.enonic.xp:lib-thymeleaf:${xpVersion}"
	//include "com.enonic.xp:lib-value:${xpVersion}"
	//include "com.enonic.xp:lib-websocket:${xpVersion}"
	//include "com.enonic.xp:lib-xslt:${xpVersion}"

	//include 'com.enonic.lib:lib-cache:2.1.1'
	//include 'com.enonic.lib:lib-guillotine:1.0.1'
	//include 'com.enonic.lib:lib-http-client:2.0.0'
	//include 'com.enonic.lib:lib-license:2.0.0'
	//include 'com.enonic.lib:lib-router:2.1.0'
	//include 'com.enonic.lib:menu:1.3.3'
	//include 'com.enonic.lib:text-encoding:1.2.0'
	//include 'com.enonic.lib:lib-util:3.0.0'
}


tasks.withType(Copy) {
  includeEmptyDirs = false
}


//──────────────────────────────────────────────────────────────────────────────
// Gradle wrapper
//──────────────────────────────────────────────────────────────────────────────
wrapper {
	distributionUrl = "${gradleDistributionUrl}"
}

/*tasks.named('wrapper') {
    distributionType = Wrapper.DistributionType.ALL
}*/


//──────────────────────────────────────────────────────────────────────────────
// Gradle node plugin
//──────────────────────────────────────────────────────────────────────────────
/*node {
	version "${nodeVersion}"
	download true
}*/


//──────────────────────────────────────────────────────────────────────────────
// Webpack
//──────────────────────────────────────────────────────────────────────────────
sourceSets {
	main {
		java {
			srcDir 'src/main/java'
		}
		resources { // Paths relative to src/main/resources
			exclude 'assets/**/*.svg'
		}
	}
}


task webpack(type:NodeTask) {
	dependsOn yarn_install
	mustRunAfter yarn_install
	script = file('node_modules/webpack-cli/bin/cli.js')
	args = [
		'--color'
	]
	outputs.dir './build/resources/main' // processResources will delete the directory if this is not present
}


task watch(type:NodeTask) {
	script = file('node_modules/webpack-cli/bin/cli.js')
	args = [
		'--color',
		'--watch'
	]
}


processResources {
	dependsOn webpack
	mustRunAfter webpack

	exclude '**/.gitkeep'

	// Let gradle copy these
	//include '**/*.mjs'
	//include '**/*.xml'

	// Let webpack handle these (rather than gradle)
	exclude '**/*.css'
	exclude '**/*.es'
	exclude '**/*.js'
	exclude '**/*.jsx'
	exclude '**/*.less'
	exclude '**/*.sass'
	exclude '**/*.scss'
	exclude '**/*.styl'
}


/*publishing {
	publications {
		mavenJava( MavenPublication ) {
			from components.java
		}
	}
	repositories {
		maven {
			url 'http://repo.enonic.net/artifactory/public'
		}
	}
}*/
